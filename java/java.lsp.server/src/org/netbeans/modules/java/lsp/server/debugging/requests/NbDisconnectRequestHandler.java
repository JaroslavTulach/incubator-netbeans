/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.java.lsp.server.debugging.requests;

import java.io.IOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.modules.java.lsp.server.debugging.IDebugAdapterContext;
import org.netbeans.modules.java.lsp.server.debugging.IDebugSession;
import org.netbeans.modules.java.lsp.server.debugging.LaunchMode;
import org.netbeans.modules.java.lsp.server.debugging.protocol.Messages.Response;
import org.netbeans.modules.java.lsp.server.debugging.protocol.Requests.Arguments;
import org.netbeans.modules.java.lsp.server.debugging.protocol.Requests.Command;
import org.netbeans.modules.java.lsp.server.debugging.protocol.Requests.DisconnectArguments;
import org.netbeans.modules.java.lsp.server.debugging.requests.DebuggerRequestHandler;

/**
 *
 * @author martin
 */
final class NbDisconnectRequestHandler implements DebuggerRequestHandler {

    private static final Logger LOGGER = Logger.getLogger(NbDisconnectRequestHandler.class.getName());

    @Override
    public List<Command> getTargetCommands() {
        return Arrays.asList(Command.DISCONNECT);
    }

    @Override
    public CompletableFuture<Response> handle(Command command, Arguments arguments, Response response,
            IDebugAdapterContext context) {
        destroyDebugSession(command, arguments, response, context);
        destroyResource(context);
        return CompletableFuture.completedFuture(response);
    }

    public void destroyDebugSession(Command command, Arguments arguments, Response response, IDebugAdapterContext context) {
        DisconnectArguments disconnectArguments = (DisconnectArguments) arguments;
        IDebugSession debugSession = context.getDebugSession();
        if (debugSession != null) {
            if (disconnectArguments.terminateDebuggee && !context.isAttached()) {
                debugSession.terminate();
            } else {
                debugSession.detach();
            }
        }
    }

    /**
     * Destroy the resources generated by the debug session.
     *
     * @param context the debug context
     */
    private void destroyResource(IDebugAdapterContext context) {
        if (shouldDestroyLaunchFiles(context)) {
            destroyLaunchFiles(context);
        }
    }

    private boolean shouldDestroyLaunchFiles(IDebugAdapterContext context) {
        // Delete the temporary launch files must happen after the debuggee process is fully exited,
        // otherwise it throws error saying the file is being used by other process.
        // In Debug mode, the debugger is able to receive VM terminate event. It's sensible to do cleanup.
        // In noDebug mode, if the debuggee is launched internally by the debugger, the debugger knows
        // when the debuggee process exited. Should do cleanup. But if the debuggee is launched in the
        // integrated/external terminal, the debugger lost the contact with the debuggee after it's launched.
        // Have no idea when the debuggee is exited. So ignore the cleanup.
        return context.getLaunchMode() == LaunchMode.DEBUG || context.getDebuggeeProcess() != null;
    }

    private void destroyLaunchFiles(IDebugAdapterContext context) {
        // Sometimes when the debug session is terminated, the debuggee process is not exited immediately.
        // Add retry to delete the temporary launch files.
        int retry = 5;
        while (retry-- > 0) {
            try {
                if (context.getClasspathJar() != null) {
                    Files.deleteIfExists(context.getClasspathJar());
                    context.setClasspathJar(null);
                }

                if (context.getArgsfile() != null) {
                    Files.deleteIfExists(context.getArgsfile());
                    context.setArgsfile(null);
                }

                break;
            } catch (IOException e) {
                // do nothing.
                LOGGER.log(Level.WARNING, "Failed to destory launch files, will retry again.");
            }

            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                // do nothing.
            }
        }
    }
}
